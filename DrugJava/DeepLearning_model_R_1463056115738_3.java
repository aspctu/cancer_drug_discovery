/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-05-12T12:09:18.594-05:00
  3.8.1.3
  
  Standalone prediction code with sample test data for DeepLearningModel named DeepLearning_model_R_1463056115738_3

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/DeepLearning_model_R_1463056115738_3 > DeepLearning_model_R_1463056115738_3.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m DeepLearning_model_R_1463056115738_3.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="DeepLearning_model_R_1463056115738_3", algorithm="deeplearning")
public class DeepLearning_model_R_1463056115738_3 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Regression; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 11; }
  public int nclasses() { return 1; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[7];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = new double[7];
    static {
      NORMMUL_0.fill(VALUES);
    }
    static final class NORMMUL_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = 1.9179804958904893E-4;
        sa[1] = 2.0614948630555903;
        sa[2] = 2.227733740608967;
        sa[3] = 0.943422158754519;
        sa[4] = 0.5938430642086729;
        sa[5] = 0.20729378407083623;
        sa[6] = 0.7780748673526275;
      }
    }
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = new double[7];
    static {
      NORMSUB_0.fill(VALUES);
    }
    static final class NORMSUB_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = -22177.456896551725;
        sa[1] = 0.6293103448275862;
        sa[2] = 0.27586206896551724;
        sa[3] = 1.1551724137931034;
        sa[4] = 1.046182790775862;
        sa[5] = 6.741379310344827;
        sa[6] = 1.9051724137931034;
      }
    }
}
  // Workspace for storing categorical input variables.
  public static final int[] CATS = {0,0,0,0};
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0,38,53,59,62};
  // Standardization/Normalization scaling factor for response.
  public static final double[] NORMRESPMUL = {2.169208927727811};
  // Standardization/Normalization offset for response.
  public static final double[] NORMRESPSUB = {0.6982758620689655};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {69,12,8,1};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ DeepLearning_model_R_1463056115738_3_Activation_0.VALUES,
      /* Rectifier */ DeepLearning_model_R_1463056115738_3_Activation_1.VALUES,
      /* Rectifier */ DeepLearning_model_R_1463056115738_3_Activation_2.VALUES,
      /* Linear */ DeepLearning_model_R_1463056115738_3_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ DeepLearning_model_R_1463056115738_3_Bias_0.VALUES,
      /* Rectifier */ DeepLearning_model_R_1463056115738_3_Bias_1.VALUES,
      /* Rectifier */ DeepLearning_model_R_1463056115738_3_Bias_2.VALUES,
      /* Linear */ DeepLearning_model_R_1463056115738_3_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ DeepLearning_model_R_1463056115738_3_Weight_0.VALUES,
      /* Rectifier */ DeepLearning_model_R_1463056115738_3_Weight_1.VALUES,
      /* Rectifier */ DeepLearning_model_R_1463056115738_3_Weight_2.VALUES,
      /* Linear */ DeepLearning_model_R_1463056115738_3_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_DeepLearning_model_R_1463056115738_3.VALUES;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* drug */ DeepLearning_model_R_1463056115738_3_ColInfo_0.VALUES,
    /* Stage */ DeepLearning_model_R_1463056115738_3_ColInfo_1.VALUES,
    /* x1 */ DeepLearning_model_R_1463056115738_3_ColInfo_2.VALUES,
    /* stem */ DeepLearning_model_R_1463056115738_3_ColInfo_3.VALUES,
    /* bday */ null,
    /* Gender */ null,
    /* bad */ null,
    /* perf */ null,
    /* Ldh */ null,
    /* size */ null,
    /* IPI */ null,
    /* status */ null
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = null;
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public DeepLearning_model_R_1463056115738_3() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(4293595349355003752L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    java.util.Arrays.fill(CATS,0);
    int i = 0, ncats = 0;
    for(; i<4; ++i) {
      if (!Double.isNaN(data[i])) {
        int c = (int) data[i];
        CATS[ncats++] = c + CATOFFSETS[i];
      }
    }
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i-4] = Double.isNaN(data[i]) ? 0 : (data[i] - NORMSUB.VALUES[i-4])*NORMMUL.VALUES[i-4];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<ncats; ++i) ACTIVATION[0][CATS[i]] = 1;
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        preds[1] = (ACTIVATION[i][0] / NORMRESPMUL[0] + NORMRESPSUB[0]);
        preds[1] = preds[1];
        if (Double.isNaN(preds[1])) throw new RuntimeException("Predicted regression target NaN!");
      }
    }
    preds[0] = preds[1];
    return preds;
  }
}
// Neuron activation values for Input layer
class DeepLearning_model_R_1463056115738_3_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[69];
  static {
    DeepLearning_model_R_1463056115738_3_Activation_0_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1463056115738_3_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
      sa[33] = 0.0;
      sa[34] = 0.0;
      sa[35] = 0.0;
      sa[36] = 0.0;
      sa[37] = 0.0;
      sa[38] = 0.0;
      sa[39] = 0.0;
      sa[40] = 0.0;
      sa[41] = 0.0;
      sa[42] = 0.0;
      sa[43] = 0.0;
      sa[44] = 0.0;
      sa[45] = 0.0;
      sa[46] = 0.0;
      sa[47] = 0.0;
      sa[48] = 0.0;
      sa[49] = 0.0;
      sa[50] = 0.0;
      sa[51] = 0.0;
      sa[52] = 0.0;
      sa[53] = 0.0;
      sa[54] = 0.0;
      sa[55] = 0.0;
      sa[56] = 0.0;
      sa[57] = 0.0;
      sa[58] = 0.0;
      sa[59] = 0.0;
      sa[60] = 0.0;
      sa[61] = 0.0;
      sa[62] = 0.0;
      sa[63] = 0.0;
      sa[64] = 0.0;
      sa[65] = 0.0;
      sa[66] = 0.0;
      sa[67] = 0.0;
      sa[68] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class DeepLearning_model_R_1463056115738_3_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[12];
  static {
    DeepLearning_model_R_1463056115738_3_Activation_1_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1463056115738_3_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class DeepLearning_model_R_1463056115738_3_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[8];
  static {
    DeepLearning_model_R_1463056115738_3_Activation_2_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1463056115738_3_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
    }
  }
}
// Neuron activation values for Linear layer
class DeepLearning_model_R_1463056115738_3_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[1];
  static {
    DeepLearning_model_R_1463056115738_3_Activation_3_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1463056115738_3_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class DeepLearning_model_R_1463056115738_3_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class DeepLearning_model_R_1463056115738_3_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[12];
  static {
    DeepLearning_model_R_1463056115738_3_Bias_1_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1463056115738_3_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.5208089842171322;
      sa[1] = 0.5157843965428088;
      sa[2] = 0.5371199264905195;
      sa[3] = 0.45256048818156175;
      sa[4] = 0.48728323377245936;
      sa[5] = 0.3068802502121548;
      sa[6] = 0.6072843201421679;
      sa[7] = 0.563580136903418;
      sa[8] = 0.5599545282005981;
      sa[9] = 0.5655346074168803;
      sa[10] = 0.5062294234316002;
      sa[11] = 0.5738645530791456;
    }
  }
}
// Neuron bias values for Rectifier layer
class DeepLearning_model_R_1463056115738_3_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[8];
  static {
    DeepLearning_model_R_1463056115738_3_Bias_2_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1463056115738_3_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.0301264592484034;
      sa[1] = 0.9655745328344113;
      sa[2] = 0.9342316156452642;
      sa[3] = 1.0258227700742557;
      sa[4] = 1.0294306235881263;
      sa[5] = 0.9641623395176055;
      sa[6] = 0.9678894691693579;
      sa[7] = 0.9699929216585221;
    }
  }
}
// Neuron bias values for Linear layer
class DeepLearning_model_R_1463056115738_3_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[1];
  static {
    DeepLearning_model_R_1463056115738_3_Bias_3_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1463056115738_3_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.013743571185217176;
    }
  }
}
class DeepLearning_model_R_1463056115738_3_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class DeepLearning_model_R_1463056115738_3_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[828];
  static {
    DeepLearning_model_R_1463056115738_3_Weight_1_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1463056115738_3_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.09671207f;
      sa[1] = -0.065359026f;
      sa[2] = -0.27872887f;
      sa[3] = 0.22607297f;
      sa[4] = 0.15700908f;
      sa[5] = -0.24656323f;
      sa[6] = -0.118788175f;
      sa[7] = 0.079792395f;
      sa[8] = -0.21877447f;
      sa[9] = -0.048496023f;
      sa[10] = 0.06068971f;
      sa[11] = 0.15651527f;
      sa[12] = 0.070551194f;
      sa[13] = 0.18643214f;
      sa[14] = 0.08777899f;
      sa[15] = 0.0028422247f;
      sa[16] = -0.19316037f;
      sa[17] = -0.010160435f;
      sa[18] = 0.14684053f;
      sa[19] = 0.015976217f;
      sa[20] = 0.25053504f;
      sa[21] = -0.13737594f;
      sa[22] = -0.13473731f;
      sa[23] = 0.14952826f;
      sa[24] = -0.009039115f;
      sa[25] = 0.008624727f;
      sa[26] = -0.055632055f;
      sa[27] = 0.17327103f;
      sa[28] = -0.12903178f;
      sa[29] = -0.051437948f;
      sa[30] = 0.2587363f;
      sa[31] = 0.17311342f;
      sa[32] = -0.16471457f;
      sa[33] = 0.14921838f;
      sa[34] = 0.09743353f;
      sa[35] = -0.18790436f;
      sa[36] = 0.16279723f;
      sa[37] = -0.26840883f;
      sa[38] = 0.2101156f;
      sa[39] = 0.1442312f;
      sa[40] = -0.03491814f;
      sa[41] = 0.14491382f;
      sa[42] = 0.22001682f;
      sa[43] = 0.26770693f;
      sa[44] = -0.024282234f;
      sa[45] = 0.13807775f;
      sa[46] = 0.041702677f;
      sa[47] = -0.21784452f;
      sa[48] = 0.19135441f;
      sa[49] = 0.21586633f;
      sa[50] = -0.01864434f;
      sa[51] = 0.033787064f;
      sa[52] = -0.13436845f;
      sa[53] = -0.03969384f;
      sa[54] = 0.076558836f;
      sa[55] = -0.0314074f;
      sa[56] = -0.2545941f;
      sa[57] = -0.038418904f;
      sa[58] = 0.24737228f;
      sa[59] = 0.21852443f;
      sa[60] = -0.23865652f;
      sa[61] = 0.21715616f;
      sa[62] = -0.013759533f;
      sa[63] = -0.11138127f;
      sa[64] = 0.012788553f;
      sa[65] = -0.24346736f;
      sa[66] = 0.049063005f;
      sa[67] = -0.10710043f;
      sa[68] = 0.015584987f;
      sa[69] = 0.23917593f;
      sa[70] = -0.13232651f;
      sa[71] = -0.24730903f;
      sa[72] = -0.22913888f;
      sa[73] = 0.24052133f;
      sa[74] = -0.16936888f;
      sa[75] = -0.10544002f;
      sa[76] = -0.12102382f;
      sa[77] = -0.0076023643f;
      sa[78] = -0.004517925f;
      sa[79] = 0.031317003f;
      sa[80] = 0.10124051f;
      sa[81] = -0.10778115f;
      sa[82] = -0.11216677f;
      sa[83] = -0.11916184f;
      sa[84] = -0.20610553f;
      sa[85] = 0.104147844f;
      sa[86] = -0.099535294f;
      sa[87] = -0.05424277f;
      sa[88] = -0.08688777f;
      sa[89] = 0.018155284f;
      sa[90] = 0.24602035f;
      sa[91] = -0.14910781f;
      sa[92] = 0.22276941f;
      sa[93] = -0.117522165f;
      sa[94] = -0.1293851f;
      sa[95] = 0.21531786f;
      sa[96] = 0.14779693f;
      sa[97] = 0.16360152f;
      sa[98] = -0.21841075f;
      sa[99] = 0.055221587f;
      sa[100] = -0.12112268f;
      sa[101] = -0.025243485f;
      sa[102] = -0.05196009f;
      sa[103] = 0.15491642f;
      sa[104] = -0.06687763f;
      sa[105] = 0.046500783f;
      sa[106] = -0.14880739f;
      sa[107] = 0.15602697f;
      sa[108] = -0.20977448f;
      sa[109] = 0.20501004f;
      sa[110] = -0.021826722f;
      sa[111] = -0.20787154f;
      sa[112] = -0.24355525f;
      sa[113] = -0.042454075f;
      sa[114] = -0.13220632f;
      sa[115] = 0.22928654f;
      sa[116] = -0.045389514f;
      sa[117] = -0.0675421f;
      sa[118] = 0.10176774f;
      sa[119] = 0.0860464f;
      sa[120] = -0.15938736f;
      sa[121] = -0.03472315f;
      sa[122] = 0.25937864f;
      sa[123] = 0.06605173f;
      sa[124] = 0.20225054f;
      sa[125] = -0.06636546f;
      sa[126] = 0.08259961f;
      sa[127] = -0.1649464f;
      sa[128] = -0.2555386f;
      sa[129] = -0.16723284f;
      sa[130] = 0.2208931f;
      sa[131] = -0.02366463f;
      sa[132] = -0.12004871f;
      sa[133] = 0.19382013f;
      sa[134] = -0.09724919f;
      sa[135] = 0.13804537f;
      sa[136] = -0.23571543f;
      sa[137] = 0.27611718f;
      sa[138] = -0.06015603f;
      sa[139] = 0.052894093f;
      sa[140] = 0.27113548f;
      sa[141] = -0.12914355f;
      sa[142] = 0.2774415f;
      sa[143] = -0.015175981f;
      sa[144] = -0.16109218f;
      sa[145] = -0.25791544f;
      sa[146] = -0.17640847f;
      sa[147] = -0.2189002f;
      sa[148] = -0.23761262f;
      sa[149] = 0.19079942f;
      sa[150] = 0.21992882f;
      sa[151] = -0.039441373f;
      sa[152] = -0.009367195f;
      sa[153] = 0.20476788f;
      sa[154] = 0.2707374f;
      sa[155] = -0.089960806f;
      sa[156] = -0.052130423f;
      sa[157] = -0.15211159f;
      sa[158] = 0.017342526f;
      sa[159] = -0.19128495f;
      sa[160] = -0.14911218f;
      sa[161] = 0.012682365f;
      sa[162] = -0.15959242f;
      sa[163] = 0.282601f;
      sa[164] = -0.203133f;
      sa[165] = 0.27052596f;
      sa[166] = 0.10390656f;
      sa[167] = -0.19191049f;
      sa[168] = 0.27611277f;
      sa[169] = 0.14172776f;
      sa[170] = 0.14692318f;
      sa[171] = -0.061276834f;
      sa[172] = 0.028427005f;
      sa[173] = 0.25312766f;
      sa[174] = -0.017328165f;
      sa[175] = 0.08889632f;
      sa[176] = -0.053932812f;
      sa[177] = -0.038506422f;
      sa[178] = 0.005689528f;
      sa[179] = 0.11453899f;
      sa[180] = -0.08286869f;
      sa[181] = -0.0766909f;
      sa[182] = 0.097821675f;
      sa[183] = -0.11690187f;
      sa[184] = -0.24268395f;
      sa[185] = -0.2241296f;
      sa[186] = 0.032211058f;
      sa[187] = 0.24541801f;
      sa[188] = -0.13143979f;
      sa[189] = 0.17904818f;
      sa[190] = 0.25114295f;
      sa[191] = -0.17105347f;
      sa[192] = -0.19369188f;
      sa[193] = 0.23337942f;
      sa[194] = -0.09198094f;
      sa[195] = 0.037592284f;
      sa[196] = 0.2490262f;
      sa[197] = -0.2230425f;
      sa[198] = 0.2649777f;
      sa[199] = 0.13114476f;
      sa[200] = 0.16218436f;
      sa[201] = 0.33390522f;
      sa[202] = 0.24222383f;
      sa[203] = 0.15795194f;
      sa[204] = 0.035128273f;
      sa[205] = -0.07663747f;
      sa[206] = 0.1680843f;
      sa[207] = 0.091504596f;
      sa[208] = 0.24688298f;
      sa[209] = -0.22652143f;
      sa[210] = -0.105527334f;
      sa[211] = -0.07546047f;
      sa[212] = 0.10433724f;
      sa[213] = 0.2430917f;
      sa[214] = 0.009595788f;
      sa[215] = -0.16096586f;
      sa[216] = -0.21191421f;
      sa[217] = -0.13290277f;
      sa[218] = 0.23023824f;
      sa[219] = -0.16393827f;
      sa[220] = 0.073075026f;
      sa[221] = -0.0736763f;
      sa[222] = -0.2650619f;
      sa[223] = -0.2018392f;
      sa[224] = -0.15752399f;
      sa[225] = 0.0587201f;
      sa[226] = 0.11378574f;
      sa[227] = -0.083498135f;
      sa[228] = -0.24734563f;
      sa[229] = 0.10503036f;
      sa[230] = -0.031394053f;
      sa[231] = -0.1167149f;
      sa[232] = 0.12578665f;
      sa[233] = -0.09276193f;
      sa[234] = -0.045705155f;
      sa[235] = 0.15130702f;
      sa[236] = -0.2598405f;
      sa[237] = -0.07499974f;
      sa[238] = -0.1899388f;
      sa[239] = -0.25873643f;
      sa[240] = -0.2543119f;
      sa[241] = -0.20017862f;
      sa[242] = -0.11434623f;
      sa[243] = -0.24462241f;
      sa[244] = 0.05428027f;
      sa[245] = 0.024143897f;
      sa[246] = 0.23806585f;
      sa[247] = -0.17228696f;
      sa[248] = 0.17277667f;
      sa[249] = -0.24182892f;
      sa[250] = -0.12283484f;
      sa[251] = 0.101703994f;
      sa[252] = -0.24045043f;
      sa[253] = -0.105328016f;
      sa[254] = 0.15671739f;
      sa[255] = -0.25249818f;
      sa[256] = -0.2781172f;
      sa[257] = 0.008422433f;
      sa[258] = 0.11860925f;
      sa[259] = -0.018010907f;
      sa[260] = -0.055895254f;
      sa[261] = -0.042150587f;
      sa[262] = 0.10526038f;
      sa[263] = 0.15120696f;
      sa[264] = -0.14030908f;
      sa[265] = -0.052876066f;
      sa[266] = 0.18150602f;
      sa[267] = -0.05713129f;
      sa[268] = 0.060979616f;
      sa[269] = -0.18079786f;
      sa[270] = -0.09443444f;
      sa[271] = 0.2982435f;
      sa[272] = 0.078475304f;
      sa[273] = 0.11667621f;
      sa[274] = 0.18966572f;
      sa[275] = -0.22734436f;
      sa[276] = 0.018518763f;
      sa[277] = -0.26806632f;
      sa[278] = -0.2191662f;
      sa[279] = -0.018466754f;
      sa[280] = -0.10408578f;
      sa[281] = 0.23682475f;
      sa[282] = -0.22010858f;
      sa[283] = 0.16972432f;
      sa[284] = 0.031096043f;
      sa[285] = -0.11513075f;
      sa[286] = -0.008850907f;
      sa[287] = -0.18443045f;
      sa[288] = -0.02734901f;
      sa[289] = 0.19892806f;
      sa[290] = 0.20760372f;
      sa[291] = -0.1763207f;
      sa[292] = -0.034709908f;
      sa[293] = -0.24067223f;
      sa[294] = 0.0867861f;
      sa[295] = 0.08231029f;
      sa[296] = 0.12344367f;
      sa[297] = -0.103322156f;
      sa[298] = -0.14344919f;
      sa[299] = -0.20174232f;
      sa[300] = 0.10982552f;
      sa[301] = 0.20783359f;
      sa[302] = 0.026171017f;
      sa[303] = -0.08186339f;
      sa[304] = -0.0455688f;
      sa[305] = 0.036761317f;
      sa[306] = 0.055373132f;
      sa[307] = 0.2114849f;
      sa[308] = -0.13336931f;
      sa[309] = 0.07104864f;
      sa[310] = -0.22141403f;
      sa[311] = -0.2535352f;
      sa[312] = 0.28013498f;
      sa[313] = 0.10511385f;
      sa[314] = -0.09866881f;
      sa[315] = 0.06484936f;
      sa[316] = -0.12608948f;
      sa[317] = -0.15129788f;
      sa[318] = 0.24737309f;
      sa[319] = -0.07650373f;
      sa[320] = -0.17097794f;
      sa[321] = -0.2292585f;
      sa[322] = -0.24243626f;
      sa[323] = -0.16515267f;
      sa[324] = 0.11871271f;
      sa[325] = 0.23061593f;
      sa[326] = -0.16873007f;
      sa[327] = -0.13715145f;
      sa[328] = -0.054021038f;
      sa[329] = -3.621512E-4f;
      sa[330] = 0.20886403f;
      sa[331] = -0.13115737f;
      sa[332] = 0.30701151f;
      sa[333] = 0.16431409f;
      sa[334] = -0.11480458f;
      sa[335] = -0.14154753f;
      sa[336] = 0.003410753f;
      sa[337] = -0.008158003f;
      sa[338] = -0.09699961f;
      sa[339] = -0.18966958f;
      sa[340] = -0.11015511f;
      sa[341] = 0.14436854f;
      sa[342] = -0.19603606f;
      sa[343] = -0.35345623f;
      sa[344] = 0.25551167f;
      sa[345] = -0.052204434f;
      sa[346] = -0.15251595f;
      sa[347] = -0.25584266f;
      sa[348] = -0.2253226f;
      sa[349] = -0.11406673f;
      sa[350] = 0.19365865f;
      sa[351] = 0.054503877f;
      sa[352] = 0.14136598f;
      sa[353] = 0.22940423f;
      sa[354] = -0.06737629f;
      sa[355] = 0.15281847f;
      sa[356] = -0.22841153f;
      sa[357] = 0.12742482f;
      sa[358] = -0.10403071f;
      sa[359] = -0.0091943145f;
      sa[360] = 0.14784174f;
      sa[361] = -0.1390378f;
      sa[362] = 0.12257214f;
      sa[363] = -0.035342462f;
      sa[364] = 0.03027405f;
      sa[365] = -0.23566563f;
      sa[366] = 0.23046598f;
      sa[367] = 0.14384241f;
      sa[368] = -0.18851604f;
      sa[369] = 0.23255908f;
      sa[370] = -0.07796625f;
      sa[371] = 0.04464989f;
      sa[372] = -0.09258881f;
      sa[373] = 0.03662125f;
      sa[374] = 0.23958573f;
      sa[375] = 0.01801679f;
      sa[376] = -0.2142926f;
      sa[377] = -0.17368984f;
      sa[378] = 0.0393571f;
      sa[379] = 0.13347965f;
      sa[380] = -0.15414114f;
      sa[381] = -0.11036893f;
      sa[382] = -0.0461061f;
      sa[383] = 0.0343379f;
      sa[384] = 0.19407968f;
      sa[385] = -0.16900624f;
      sa[386] = -0.16229619f;
      sa[387] = 0.14999142f;
      sa[388] = -0.10132864f;
      sa[389] = 0.08685884f;
      sa[390] = 0.05753639f;
      sa[391] = 0.26292765f;
      sa[392] = 0.09465748f;
      sa[393] = 0.24996175f;
      sa[394] = 0.20516096f;
      sa[395] = 0.15994678f;
      sa[396] = -0.21403717f;
      sa[397] = -0.022355571f;
      sa[398] = -0.2284619f;
      sa[399] = -0.23040818f;
      sa[400] = 0.12719548f;
      sa[401] = 0.13317627f;
      sa[402] = 0.24443546f;
      sa[403] = 0.0988823f;
      sa[404] = 0.17304413f;
      sa[405] = 0.13552542f;
      sa[406] = 0.11981709f;
      sa[407] = -0.1048401f;
      sa[408] = -0.16413982f;
      sa[409] = 0.18698037f;
      sa[410] = -0.12795284f;
      sa[411] = 0.14311668f;
      sa[412] = 0.003716952f;
      sa[413] = 0.02533831f;
      sa[414] = -0.19587399f;
      sa[415] = -5.151958E-4f;
      sa[416] = 0.19091076f;
      sa[417] = -0.21667713f;
      sa[418] = -0.20939393f;
      sa[419] = 0.07450031f;
      sa[420] = 0.07871802f;
      sa[421] = -0.06583033f;
      sa[422] = -0.05321136f;
      sa[423] = 0.033455275f;
      sa[424] = 0.25074f;
      sa[425] = -0.15960866f;
      sa[426] = 0.16423729f;
      sa[427] = 0.17286584f;
      sa[428] = -0.050903782f;
      sa[429] = 0.14271723f;
      sa[430] = 0.118370146f;
      sa[431] = -0.23324902f;
      sa[432] = -0.18673475f;
      sa[433] = 0.063986346f;
      sa[434] = -0.15253963f;
      sa[435] = -0.13572799f;
      sa[436] = 0.07122088f;
      sa[437] = 0.07062974f;
      sa[438] = -0.03126673f;
      sa[439] = 0.06698984f;
      sa[440] = -0.10499304f;
      sa[441] = 0.060989656f;
      sa[442] = 0.23117834f;
      sa[443] = 0.10907957f;
      sa[444] = -0.05878113f;
      sa[445] = -0.0060313526f;
      sa[446] = 0.043355454f;
      sa[447] = -0.068389595f;
      sa[448] = -0.114923075f;
      sa[449] = -0.12817083f;
      sa[450] = -0.032375444f;
      sa[451] = 0.24836928f;
      sa[452] = 0.16808921f;
      sa[453] = -0.23286891f;
      sa[454] = -0.03549609f;
      sa[455] = 0.21565227f;
      sa[456] = -0.08666073f;
      sa[457] = -0.20947754f;
      sa[458] = 0.15083647f;
      sa[459] = 0.09783724f;
      sa[460] = 0.25207335f;
      sa[461] = 0.15195908f;
      sa[462] = -0.1867899f;
      sa[463] = -0.034376405f;
      sa[464] = 0.06318547f;
      sa[465] = -0.20563164f;
      sa[466] = -0.087925255f;
      sa[467] = 0.037007064f;
      sa[468] = 0.03159537f;
      sa[469] = 0.24321017f;
      sa[470] = 0.19300947f;
      sa[471] = -0.18786936f;
      sa[472] = 0.11170541f;
      sa[473] = 0.24822597f;
      sa[474] = -0.04945958f;
      sa[475] = 0.20771995f;
      sa[476] = 0.1300771f;
      sa[477] = 0.20638597f;
      sa[478] = 0.071952276f;
      sa[479] = -0.17048883f;
      sa[480] = -0.0070572817f;
      sa[481] = 0.1208299f;
      sa[482] = -0.057749823f;
      sa[483] = 0.16675161f;
      sa[484] = -0.11598132f;
      sa[485] = -0.10767492f;
      sa[486] = 0.07489976f;
      sa[487] = 0.2232525f;
      sa[488] = 0.042528797f;
      sa[489] = 0.20516616f;
      sa[490] = 0.10128333f;
      sa[491] = -0.062506385f;
      sa[492] = 0.040033232f;
      sa[493] = 0.14580107f;
      sa[494] = 0.044383436f;
      sa[495] = 0.037732597f;
      sa[496] = -0.08242233f;
      sa[497] = -0.23998678f;
      sa[498] = 0.14589189f;
      sa[499] = -0.097188786f;
      sa[500] = 0.042977255f;
      sa[501] = 0.051531468f;
      sa[502] = 0.21082869f;
      sa[503] = 0.14415872f;
      sa[504] = -0.19501694f;
      sa[505] = -0.07615845f;
      sa[506] = -0.14244398f;
      sa[507] = 0.12711583f;
      sa[508] = -0.25976175f;
      sa[509] = -0.09621256f;
      sa[510] = 0.21114343f;
      sa[511] = -0.13157475f;
      sa[512] = 0.09158469f;
      sa[513] = 0.1745643f;
      sa[514] = -0.23422055f;
      sa[515] = -0.16107173f;
      sa[516] = -0.21590568f;
      sa[517] = -0.25823107f;
      sa[518] = 0.051507883f;
      sa[519] = 0.1672618f;
      sa[520] = -0.05247119f;
      sa[521] = -0.13109179f;
      sa[522] = 0.0022366238f;
      sa[523] = -0.1980085f;
      sa[524] = 8.624539E-4f;
      sa[525] = 0.24843284f;
      sa[526] = 0.13677579f;
      sa[527] = -0.1559658f;
      sa[528] = 0.13274896f;
      sa[529] = 0.17120193f;
      sa[530] = -0.2346631f;
      sa[531] = -0.037246168f;
      sa[532] = 0.165916f;
      sa[533] = -0.14018899f;
      sa[534] = -0.10361779f;
      sa[535] = -0.079367876f;
      sa[536] = 0.03459644f;
      sa[537] = 0.2889711f;
      sa[538] = -0.16287102f;
      sa[539] = -0.208294f;
      sa[540] = 0.09022919f;
      sa[541] = 0.037594177f;
      sa[542] = -0.021808388f;
      sa[543] = -0.25302577f;
      sa[544] = -0.104181156f;
      sa[545] = 0.06666828f;
      sa[546] = -0.19310631f;
      sa[547] = 0.16857761f;
      sa[548] = -0.17185628f;
      sa[549] = 0.1329474f;
      sa[550] = 0.06348186f;
      sa[551] = 0.088244215f;
      sa[552] = -0.0096163405f;
      sa[553] = 0.22099549f;
      sa[554] = 0.10569098f;
      sa[555] = -0.029698864f;
      sa[556] = -0.061868683f;
      sa[557] = 0.106005386f;
      sa[558] = 0.26733765f;
      sa[559] = -0.036736887f;
      sa[560] = 0.24399088f;
      sa[561] = -0.10335577f;
      sa[562] = -0.0050648144f;
      sa[563] = 0.023369169f;
      sa[564] = 0.15901783f;
      sa[565] = 0.011592381f;
      sa[566] = 0.03551831f;
      sa[567] = 0.21334046f;
      sa[568] = -0.15311614f;
      sa[569] = -0.16861595f;
      sa[570] = -0.13255367f;
      sa[571] = 0.13225599f;
      sa[572] = -0.24669375f;
      sa[573] = -0.040114988f;
      sa[574] = -0.19522405f;
      sa[575] = 0.1252875f;
      sa[576] = -0.16099304f;
      sa[577] = -0.23478843f;
      sa[578] = 0.08398599f;
      sa[579] = -0.2249594f;
      sa[580] = -0.26363933f;
      sa[581] = -0.09432081f;
      sa[582] = -0.021163814f;
      sa[583] = -0.06332084f;
      sa[584] = 0.11297983f;
      sa[585] = 0.1539934f;
      sa[586] = -0.06289929f;
      sa[587] = 0.22219f;
      sa[588] = -0.16094612f;
      sa[589] = 0.21170315f;
      sa[590] = 0.106032565f;
      sa[591] = 0.13059434f;
      sa[592] = 0.022674248f;
      sa[593] = -0.09398029f;
      sa[594] = 0.061027147f;
      sa[595] = 0.014088467f;
      sa[596] = 0.10801939f;
      sa[597] = -0.019970633f;
      sa[598] = -0.17552313f;
      sa[599] = -0.2673277f;
      sa[600] = -0.19855307f;
      sa[601] = -0.18034498f;
      sa[602] = -0.1258522f;
      sa[603] = 8.825373E-4f;
      sa[604] = -0.024175165f;
      sa[605] = 0.062502615f;
      sa[606] = 0.011042273f;
      sa[607] = 0.024573404f;
      sa[608] = 0.26369345f;
      sa[609] = -0.0063544726f;
      sa[610] = -0.17922397f;
      sa[611] = 0.1264434f;
      sa[612] = -0.18457806f;
      sa[613] = -0.13517727f;
      sa[614] = 0.19158211f;
      sa[615] = 0.19230063f;
      sa[616] = 0.22644313f;
      sa[617] = -0.16904804f;
      sa[618] = -0.10066348f;
      sa[619] = 0.1653312f;
      sa[620] = 0.120672345f;
      sa[621] = -0.06368747f;
      sa[622] = -0.07737246f;
      sa[623] = -0.20405053f;
      sa[624] = -3.8979008E-4f;
      sa[625] = -0.19821453f;
      sa[626] = -0.12781076f;
      sa[627] = -0.25106886f;
      sa[628] = 0.14711767f;
      sa[629] = -0.20338988f;
      sa[630] = -0.22842462f;
      sa[631] = 0.103678755f;
      sa[632] = -0.1386124f;
      sa[633] = 0.019595526f;
      sa[634] = -0.19643573f;
      sa[635] = 0.0051921816f;
      sa[636] = -0.16248423f;
      sa[637] = 0.18327224f;
      sa[638] = 0.15835705f;
      sa[639] = -0.12984735f;
      sa[640] = 0.2423231f;
      sa[641] = 0.14209062f;
      sa[642] = -0.13429882f;
      sa[643] = -0.14809258f;
      sa[644] = -0.1782636f;
      sa[645] = 0.25688156f;
      sa[646] = -0.08677124f;
      sa[647] = 0.26500404f;
      sa[648] = -0.13136545f;
      sa[649] = 0.13759923f;
      sa[650] = 0.22232695f;
      sa[651] = -0.07856246f;
      sa[652] = 0.09990516f;
      sa[653] = 0.19567284f;
      sa[654] = 0.15797776f;
      sa[655] = 0.16450953f;
      sa[656] = 0.1334937f;
      sa[657] = 0.26075956f;
      sa[658] = -0.22622146f;
      sa[659] = -0.14686944f;
      sa[660] = -0.27581486f;
      sa[661] = 0.046770252f;
      sa[662] = 0.071231194f;
      sa[663] = 0.06876047f;
      sa[664] = -0.16205843f;
      sa[665] = -0.06827034f;
      sa[666] = 0.16827406f;
      sa[667] = 0.23599568f;
      sa[668] = -0.17214103f;
      sa[669] = -0.2303368f;
      sa[670] = -0.16463259f;
      sa[671] = -0.20123252f;
      sa[672] = 0.20987111f;
      sa[673] = -0.0120289875f;
      sa[674] = 0.24557349f;
      sa[675] = -0.03503874f;
      sa[676] = -0.15778622f;
      sa[677] = 0.079020485f;
      sa[678] = 0.14276649f;
      sa[679] = 0.25059414f;
      sa[680] = -0.14815174f;
      sa[681] = 0.199017f;
      sa[682] = -0.16455781f;
      sa[683] = -0.095281236f;
      sa[684] = -0.02875719f;
      sa[685] = -0.10639821f;
      sa[686] = -0.21527165f;
      sa[687] = 0.0917342f;
      sa[688] = -0.073487006f;
      sa[689] = 0.07115744f;
      sa[690] = -0.21552941f;
      sa[691] = 0.061650585f;
      sa[692] = 0.18730786f;
      sa[693] = 0.2577255f;
      sa[694] = -0.06668833f;
      sa[695] = -0.05607575f;
      sa[696] = 0.24080646f;
      sa[697] = -0.18497339f;
      sa[698] = -0.18180336f;
      sa[699] = -0.05044356f;
      sa[700] = 0.03774619f;
      sa[701] = 0.12648672f;
      sa[702] = 0.031259894f;
      sa[703] = -0.0074447137f;
      sa[704] = -0.014513754f;
      sa[705] = -0.19987139f;
      sa[706] = -0.032821532f;
      sa[707] = -0.0018294343f;
      sa[708] = -0.075412594f;
      sa[709] = 0.04167917f;
      sa[710] = 0.018984495f;
      sa[711] = -0.14192781f;
      sa[712] = 0.26115343f;
      sa[713] = 0.051901642f;
      sa[714] = 0.03441397f;
      sa[715] = 0.0072370465f;
      sa[716] = -0.18984385f;
      sa[717] = -0.02094138f;
      sa[718] = -0.17089711f;
      sa[719] = -0.26836908f;
      sa[720] = -0.20462225f;
      sa[721] = 0.20532507f;
      sa[722] = 0.23806596f;
      sa[723] = -0.13787246f;
      sa[724] = -0.21321951f;
      sa[725] = 0.12457227f;
      sa[726] = -0.16931222f;
      sa[727] = -0.1721085f;
      sa[728] = -0.14654347f;
      sa[729] = 0.06718036f;
      sa[730] = 0.13193822f;
      sa[731] = -0.08422244f;
      sa[732] = -0.028995464f;
      sa[733] = 0.12319512f;
      sa[734] = -0.12226398f;
      sa[735] = -0.15665035f;
      sa[736] = -0.16315186f;
      sa[737] = -0.2686253f;
      sa[738] = -0.18900628f;
      sa[739] = -0.24079186f;
      sa[740] = 0.15666066f;
      sa[741] = 0.23460536f;
      sa[742] = -0.047211748f;
      sa[743] = -0.040899917f;
      sa[744] = -0.2597675f;
      sa[745] = 0.16570145f;
      sa[746] = -0.17801851f;
      sa[747] = -0.26200452f;
      sa[748] = -0.0011719335f;
      sa[749] = 0.14093655f;
      sa[750] = 0.048437264f;
      sa[751] = -0.06698615f;
      sa[752] = 0.075848565f;
      sa[753] = -0.2890228f;
      sa[754] = 0.24207583f;
      sa[755] = 0.08595764f;
      sa[756] = -0.030913943f;
      sa[757] = -0.033276044f;
      sa[758] = 0.1121649f;
      sa[759] = 0.07928533f;
      sa[760] = -0.15041128f;
      sa[761] = -0.101061046f;
      sa[762] = -0.030784596f;
      sa[763] = 0.08189198f;
      sa[764] = 0.15039162f;
      sa[765] = 0.23059846f;
      sa[766] = -0.12419655f;
      sa[767] = -0.11655348f;
      sa[768] = -0.22566806f;
      sa[769] = -0.20467158f;
      sa[770] = 0.109279156f;
      sa[771] = 0.103362665f;
      sa[772] = 0.19948709f;
      sa[773] = -0.04791655f;
      sa[774] = -0.23341525f;
      sa[775] = -0.032467615f;
      sa[776] = 0.1753612f;
      sa[777] = 0.09517349f;
      sa[778] = 0.062142253f;
      sa[779] = 0.0719202f;
      sa[780] = -0.087621726f;
      sa[781] = 0.015271308f;
      sa[782] = -0.013224957f;
      sa[783] = -0.13512042f;
      sa[784] = 0.124603875f;
      sa[785] = 0.25200337f;
      sa[786] = 0.16222821f;
      sa[787] = -0.26777548f;
      sa[788] = -0.08588281f;
      sa[789] = 0.2452415f;
      sa[790] = -0.22448805f;
      sa[791] = -0.093342036f;
      sa[792] = -0.18187347f;
      sa[793] = 0.061855435f;
      sa[794] = 0.2876137f;
      sa[795] = -0.25443172f;
      sa[796] = -0.21515211f;
      sa[797] = 0.18880072f;
      sa[798] = 0.017990924f;
      sa[799] = 0.014351011f;
      sa[800] = -0.2630614f;
      sa[801] = -0.019544575f;
      sa[802] = -0.24029833f;
      sa[803] = 0.0022993896f;
      sa[804] = -0.17780869f;
      sa[805] = -0.16149962f;
      sa[806] = 0.13540289f;
      sa[807] = 0.02095635f;
      sa[808] = 0.23196435f;
      sa[809] = 0.26104045f;
      sa[810] = 0.11279473f;
      sa[811] = 0.26124266f;
      sa[812] = -0.13500005f;
      sa[813] = 0.038760368f;
      sa[814] = 0.0062417826f;
      sa[815] = -0.0650518f;
      sa[816] = -0.05227503f;
      sa[817] = 0.17058308f;
      sa[818] = -0.17834727f;
      sa[819] = -0.09997797f;
      sa[820] = 0.114389695f;
      sa[821] = -0.4231834f;
      sa[822] = 0.05056126f;
      sa[823] = 0.2429272f;
      sa[824] = 0.22313383f;
      sa[825] = -0.13665313f;
      sa[826] = -0.4029399f;
      sa[827] = -0.02989762f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class DeepLearning_model_R_1463056115738_3_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[96];
  static {
    DeepLearning_model_R_1463056115738_3_Weight_2_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1463056115738_3_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.37762412f;
      sa[1] = 0.3278588f;
      sa[2] = -0.10588024f;
      sa[3] = -0.47021222f;
      sa[4] = -0.038030237f;
      sa[5] = -0.09719816f;
      sa[6] = 0.13553041f;
      sa[7] = 0.1520658f;
      sa[8] = 0.3923797f;
      sa[9] = -0.27569926f;
      sa[10] = -0.20975032f;
      sa[11] = -0.25541967f;
      sa[12] = -0.4902261f;
      sa[13] = 0.24802169f;
      sa[14] = 0.05248898f;
      sa[15] = 0.3493715f;
      sa[16] = 0.18110579f;
      sa[17] = -0.05692809f;
      sa[18] = -0.031102315f;
      sa[19] = -0.0038814119f;
      sa[20] = 0.34734014f;
      sa[21] = -0.40226912f;
      sa[22] = -0.055586647f;
      sa[23] = 0.002975155f;
      sa[24] = -0.100332096f;
      sa[25] = 0.22625208f;
      sa[26] = -0.18192089f;
      sa[27] = -0.2593337f;
      sa[28] = -0.2787495f;
      sa[29] = 0.11922068f;
      sa[30] = -0.25910032f;
      sa[31] = -0.13684273f;
      sa[32] = -0.32892045f;
      sa[33] = -0.42153203f;
      sa[34] = -0.26342046f;
      sa[35] = 0.14087304f;
      sa[36] = -0.2650049f;
      sa[37] = -0.3107888f;
      sa[38] = -0.4809254f;
      sa[39] = -0.21997799f;
      sa[40] = 0.4496086f;
      sa[41] = 0.2665182f;
      sa[42] = 0.044135276f;
      sa[43] = -0.22323923f;
      sa[44] = 0.24948184f;
      sa[45] = 0.47709736f;
      sa[46] = 0.15432326f;
      sa[47] = -0.494988f;
      sa[48] = 0.26491308f;
      sa[49] = -0.09664072f;
      sa[50] = 0.27472168f;
      sa[51] = 0.5661622f;
      sa[52] = -0.005036224f;
      sa[53] = -0.05796571f;
      sa[54] = 0.37879908f;
      sa[55] = 0.47257355f;
      sa[56] = -0.2882852f;
      sa[57] = -0.1417038f;
      sa[58] = 0.22369371f;
      sa[59] = -0.0680957f;
      sa[60] = -0.36374715f;
      sa[61] = 0.20699894f;
      sa[62] = -0.1752343f;
      sa[63] = 0.48769543f;
      sa[64] = 0.48348415f;
      sa[65] = 0.35429943f;
      sa[66] = 0.31185362f;
      sa[67] = 0.25993806f;
      sa[68] = -0.28269756f;
      sa[69] = 0.2272044f;
      sa[70] = -0.3440558f;
      sa[71] = 0.4736298f;
      sa[72] = -0.40730214f;
      sa[73] = -0.04743965f;
      sa[74] = 0.49743426f;
      sa[75] = -0.23345663f;
      sa[76] = 0.44275063f;
      sa[77] = -0.20417723f;
      sa[78] = 0.35936585f;
      sa[79] = -0.35175142f;
      sa[80] = 0.51686984f;
      sa[81] = 0.23552762f;
      sa[82] = 0.49062243f;
      sa[83] = 0.043899268f;
      sa[84] = 0.5507895f;
      sa[85] = 0.47328627f;
      sa[86] = -0.2910899f;
      sa[87] = 0.02407479f;
      sa[88] = 0.48989773f;
      sa[89] = 0.28473824f;
      sa[90] = 0.16792084f;
      sa[91] = 0.52652735f;
      sa[92] = -0.29155007f;
      sa[93] = 0.3423375f;
      sa[94] = -0.5301903f;
      sa[95] = -0.3552228f;
    }
  }
}
// Neuron weights connecting Rectifier and Linear layer
class DeepLearning_model_R_1463056115738_3_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[8];
  static {
    DeepLearning_model_R_1463056115738_3_Weight_3_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1463056115738_3_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.69403166f;
      sa[1] = -0.5759533f;
      sa[2] = -0.6541439f;
      sa[3] = 0.4058961f;
      sa[4] = 0.55562496f;
      sa[5] = -0.1191672f;
      sa[6] = -0.6715613f;
      sa[7] = -0.3638648f;
    }
  }
}
// The class representing training column names
class NamesHolder_DeepLearning_model_R_1463056115738_3 implements java.io.Serializable {
  public static final String[] VALUES = new String[11];
  static {
    NamesHolder_DeepLearning_model_R_1463056115738_3_0.fill(VALUES);
  }
  static final class NamesHolder_DeepLearning_model_R_1463056115738_3_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "drug";
      sa[1] = "Stage";
      sa[2] = "x1";
      sa[3] = "stem";
      sa[4] = "bday";
      sa[5] = "Gender";
      sa[6] = "bad";
      sa[7] = "perf";
      sa[8] = "Ldh";
      sa[9] = "size";
      sa[10] = "IPI";
    }
  }
}
// The class representing column drug
class DeepLearning_model_R_1463056115738_3_ColInfo_0 implements java.io.Serializable {
  public static final String[] VALUES = new String[37];
  static {
    DeepLearning_model_R_1463056115738_3_ColInfo_0_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1463056115738_3_ColInfo_0_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "CHOP-RITUXIMAB";
      sa[1] = "CHOP-RITUXIMAB-ABVD";
      sa[2] = "CHOP-RITUXIMAB-RADIATION-splenectomy";
      sa[3] = "CHOP1";
      sa[4] = "CHOP1-RITUXIMAB";
      sa[5] = "CHOP2-RITUXIMAB";
      sa[6] = "CHOP3-RADIATION";
      sa[7] = "CHOP3-RITUXIMAB-RADIATION";
      sa[8] = "CHOP4--RITUXIMAB";
      sa[9] = "CHOP4-RITUXIMAB";
      sa[10] = "CHOP5-RITUXIMAB";
      sa[11] = "CHOP6";
      sa[12] = "CHOP6-RITUXIMAB";
      sa[13] = "CHOP6-RITUXIMAB-RADIATION";
      sa[14] = "CHOP6-RITUXIMAB-RITUMAIN";
      sa[15] = "CHOP6-RITUXIMAB-RITUXIMAB MAINTENANCE";
      sa[16] = "CHOP6-RITUXIMAB-intrathecal chemotherapy";
      sa[17] = "CHOP6-RITUXIMAB-splenectomy";
      sa[18] = "CHOP7-RITUXIMAB";
      sa[19] = "CHOP8";
      sa[20] = "CHOP8-RITUXIMAB";
      sa[21] = "CHOP8-RITUXIMAB-RADIATION";
      sa[22] = "CHOP8-RITUXIMAB-ob1ersen";
      sa[23] = "CVP-RITUXIMAB";
      sa[24] = "CVP1-RITUXIMAB-CHOP5-RITUXIMAB";
      sa[25] = "CVP4-RITUXIMAB";
      sa[26] = "CVP6-RITUXIMAB";
      sa[27] = "CVP8-RITUXIMAB";
      sa[28] = "CVPP1-doxorubicin-cyclophosphamide-RITUXIMAB";
      sa[29] = "DOXO-cyclophosphamide-RITUXIMAB";
      sa[30] = "FLUD-RITUXIMAB";
      sa[31] = "OBSE";
      sa[32] = "RITUXIMAB";
      sa[33] = "SPLENECTOMY-CHOP6-RITUXIMAB";
      sa[34] = "UNKNOWN";
      sa[35] = "fludarabine";
      sa[36] = "prednisone";
    }
  }
}
// The class representing column Stage
class DeepLearning_model_R_1463056115738_3_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[14];
  static {
    DeepLearning_model_R_1463056115738_3_ColInfo_1_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1463056115738_3_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1A";
      sa[1] = "1AE";
      sa[2] = "1B";
      sa[3] = "1BE";
      sa[4] = "2A";
      sa[5] = "2AE";
      sa[6] = "2B";
      sa[7] = "2BE";
      sa[8] = "3A";
      sa[9] = "3AE";
      sa[10] = "3B";
      sa[11] = "3BE";
      sa[12] = "4A";
      sa[13] = "4B";
    }
  }
}
// The class representing column x1
class DeepLearning_model_R_1463056115738_3_ColInfo_2 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    DeepLearning_model_R_1463056115738_3_ColInfo_2_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1463056115738_3_ColInfo_2_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "COMPOSITE LYMPHOMA";
      sa[1] = "DLBCL";
      sa[2] = "FOLLICULAR GRADE 1";
      sa[3] = "FOLLICULAR GRADE 2";
      sa[4] = "FOLLICULAR GRADE 3A";
    }
  }
}
// The class representing column stem
class DeepLearning_model_R_1463056115738_3_ColInfo_3 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    DeepLearning_model_R_1463056115738_3_ColInfo_3_0.fill(VALUES);
  }
  static final class DeepLearning_model_R_1463056115738_3_ColInfo_3_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "NO";
      sa[1] = "YES";
    }
  }
}


